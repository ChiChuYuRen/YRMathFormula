#include "qttexrenderwidget.h"
// MicroTex
#include <graphic_qt.h>

// Qt
#include <QFileDialog>
#include <QPaintEvent>
#include <QPainter>
#include <QPalette>
#include <QSvgGenerator>
#include <qdatetime.h>
// CTK
#include <ctkFileDialog.h>
#ifdef QT_DEBUG
#include <QDebug>
#include <QTimer>
#include <chrono>
#endif

using namespace microtex;

class QtTeXRenderWidgetPrivate
{
  public:
    QtTeXRenderWidgetPrivate(QtTeXRenderWidget *p) : m_this(p), m_render(nullptr)
    {
    }

    ~QtTeXRenderWidgetPrivate();
    void init(float p_textsize, int p_padding);
    QtTeXRenderWidget *m_this;
    microtex::Render *m_render;
    std::string svgTex;
    float m_textSize;
    int m_padding;
};

QtTeXRenderWidgetPrivate::~QtTeXRenderWidgetPrivate()
{
    delete m_render;
}

void QtTeXRenderWidgetPrivate::init(float p_textsize, int p_padding)
{
    m_textSize = p_textsize;
    m_padding = p_padding;

    QPalette pal = m_this->palette();
    // TODO: 根据ACSS的颜色设置渲染区的背景色,以及修改渲染出的公式颜色
    pal.setColor(QPalette::Window, Qt::white); // 将渲染区的背景色设置为白色
    m_this->setPalette(pal);
}

QtTeXRenderWidget::QtTeXRenderWidget(QWidget *parent, float text_size)
    : QWidget(parent),
      d_ptr(new QtTeXRenderWidgetPrivate(this)) //, _render(nullptr), _text_size(text_size), _padding(20)
{
    d_ptr->init(text_size, 20);
}

QtTeXRenderWidget::~QtTeXRenderWidget()
{
    delete d_ptr;
}

float QtTeXRenderWidget::getTextSize()
{
    return d_ptr->m_textSize;
    // return _text_size;
}

void QtTeXRenderWidget::setTextSize(float size)
{
    if (size == d_ptr->m_textSize)
        return;
    d_ptr->m_textSize = size;
    if (d_ptr->m_render != nullptr)
    {
        d_ptr->m_render->setTextSize(d_ptr->m_textSize);
        resize(getRenderWidth(), getRenderHeight());
        update();
    }
}

void QtTeXRenderWidget::setLaTeX(const std::string &latex)
{
    d_ptr->svgTex = latex;
    delete d_ptr->m_render;
    auto parent = parentWidget();
    int w = parent == nullptr ? width() : parent->width();
    d_ptr->m_render =
        MicroTeX::parse(latex, w - d_ptr->m_padding * 2, d_ptr->m_textSize, d_ptr->m_textSize / 3.f, 0xff424242);
    resize(getRenderWidth(), getRenderHeight());
    update(); // 调用paintevent来刷新窗口渲染内容
}

bool QtTeXRenderWidget::isRenderDisplayed()
{
    return d_ptr->m_render != nullptr;
}

int QtTeXRenderWidget::getRenderWidth()
{
    return d_ptr->m_render == nullptr ? 0 : d_ptr->m_render->getWidth() + d_ptr->m_padding * 2;
}

int QtTeXRenderWidget::getRenderHeight()
{
    return d_ptr->m_render == nullptr ? 0 : d_ptr->m_render->getHeight() + d_ptr->m_padding * 2;
}

void QtTeXRenderWidget::paintEvent(QPaintEvent *event)
{
    if (d_ptr->m_render != nullptr)
    {
        QPainter p(this);
        p.setRenderHint(QPainter::Antialiasing, true);
        Graphics2D_qt g2(&p);
        d_ptr->m_render->draw(g2, d_ptr->m_padding, d_ptr->m_padding);
    }
}
// TODO:加速创建SVG,从paintEvent的Graphics2D_qt中直接获取数据
void QtTeXRenderWidget::saveSVG(const char *path)
{

    // QString filePath = QFileDialog::getSaveFileName(this, "Save SVG",

    //                                                 "", "SVG files (*.svg)");

    QString filePath = ctkFileDialog::getSaveFileName(this, "Save SVG",

                                                      "", "SVG files (*.svg)");
    if (filePath == "")
        return;
#ifdef QT_DEBUG
    QTime t;
    t.start();
    auto begin = std::chrono::high_resolution_clock::now();
#endif
    QSvgGenerator m_generator;
    m_generator.setFileName(filePath);
    m_generator.setSize(QSize(this->width(), this->height()));
    m_generator.setViewBox(QRect(0, 0, this->width(), this->height()));
    m_generator.setTitle("Math Formula");
    m_generator.setDescription("This SVG file is generated by YRMathFormula.");
    // d_ptr->paintAll(&d_ptr->m_generator);
    QPainter m_painter;
    m_painter.begin(&m_generator);
    // m_painter = d_ptr->m_graphics_2d_qt.getQPainter();
    auto parent = parentWidget();
    int w = parent == nullptr ? width() : parent->width();
    auto render = microtex::MicroTeX::parse(d_ptr->svgTex, w - d_ptr->m_padding * 2, d_ptr->m_textSize,
                                            d_ptr->m_textSize / 3.f, 0xff424242);

    m_painter.setRenderHint(QPainter::Antialiasing, true);
    microtex::Graphics2D_qt g2(&m_painter);
    // render->draw(g2, d_ptr->m_padding, d_ptr->m_padding);
    render->draw(g2, 0, 0);
    // ok = img.save(pngName);
    m_painter.end();
#ifdef QT_DEBUG
    // qDebug() << QStringLiteral("第一段程序耗时：") << t.elapsed() / 1000.0 << "ms"; // 输出计时
    auto end = std::chrono::high_resolution_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin);
    qDebug() << QStringLiteral("第一段程序耗时：") << elapsed.count();
#endif
}
